{"version":3,"sources":["assets/Loader.gif","components/classComponents/Logout.js","components/classComponents/CustomerDashboard.js","components/classComponents/AdminDashboard.js","components/classComponents/Dashboard.js","components/classComponents/Login.js","components/classComponents/Register.js","components/classComponents/PageNotFound.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Logout","props","react_default","a","createElement","type","onClick","logout","CustomerDashboard","statement","concat","this","userName","email","address","Component","tableStyle","fontFamily","borderCollapse","width","margin","tdth","border","textAlign","padding","AdminDashboard","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getCustomerList","setState","showLoader","axios","get","then","response","customerDetailsList","data","map","customerDetails","key","style","accountType","catch","error","console","log","state","src","Loader","alt","Dashboard","_Component","inherits","createClass","value","classComponents_CustomerDashboard","classComponents_AdminDashboard","classComponents_Logout","Login","handleEmailChange","event","target","emailValid","emailErrorMsg","checkall","test","handlePasswordChange","password","passwordValid","handleSubmit","showloader","setTimeout","i","length","isLoggedIn","loginErrorMsg","preventDefault","isButtonDisable","userNameValid","classComponents_Dashboard","assign","Fragment","onSubmit","onChange","fontSize","disabled","react_router_dom","to","Register","handleUsernameChange","localeCompare","handleAccountTypeChange","accountTypeValid","handleAddressChange","addressValid","confirmPassword","confirmPasswordErrorMsg","confirmPasswordValid","handleConfirmPasswordChange","user","post","err","name","PageNotFound","App","process","REACT_APP_BASE_HREF","className","basename","react_router","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2995f00e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Loader.ebffb57d.gif\";","import React from 'react'\n\nfunction Logout(props) {\n\n    function handleSubmit() {\n        props.logout();\n    }\n\n    return (\n        <button type='submit' onClick={handleSubmit}>Sign Out</button>\n    )\n}\n\nexport default Logout\n","import React, { Component } from 'react'\n\nclass CustomerDashboard extends Component {\n\n    render() {\n        \n        let statement = `Welcome ${this.props.userName}!\n        Your Account is Registered with Email ID -  ${this.props.email}`;\n        return (\n            <div>\n                <h1>{statement}</h1>\n                <div>Address : {this.props.address}</div><br/>\n            </div>\n        )\n        \n    }\n\n}\n\nexport default CustomerDashboard\n","import React, { Component } from 'react'\nimport axios from 'axios';\nimport Loader from '../../assets/Loader.gif'\n\nconst tableStyle = {\n    fontFamily: 'arial',\n    borderCollapse: 'collapse',\n    width: '80%',\n    margin: '1em auto'\n}\n\nconst tdth = {\n    border: '1px solid #dddddd',\n    textAlign: 'center',\n    padding: '8px'\n}\n\nclass AdminDashboard extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            customerDetailsList: [],\n            showLoader: true\n        }\n    }\n\n    componentDidMount() {\n        this.getCustomerList();\n    }\n    \n    \n    getCustomerList = () => {\n        this.setState({\n            showLoader: true\n        })\n        axios.get(`http://www.mocky.io/v2/5d4040a03300003e239d2afe`)\n        .then(response => {\n            this.setState({\n                customerDetailsList : response.data.map(customerDetails => {\n                        return  <tr key={customerDetails.email}>\n                                    <td style={tdth}>{customerDetails.userName}</td>\n                                    <td style={tdth}>{customerDetails.address}</td>\n                                    <td style={tdth}>{customerDetails.email}</td>\n                                    <td style={tdth}>{customerDetails.accountType}</td>\n                                </tr>\n                }),\n                showLoader: false\n            })\n        })\n        .catch(error => {\n            console.log(error)\n            this.setState({\n                showLoader: false\n            })\n        })\n    }\n\n\n    render() {\n\n        return (\n            <div>\n                <h1>Welcome Admin</h1>\n                { this.state.showLoader===false ? \n                    <table style={tableStyle}>\n                        <tbody>\n                            <tr>\n                                <th style={tdth}>Name</th>\n                                <th style={tdth}>Address</th>\n                                <th style={tdth}>Email ID</th>\n                                <th style={tdth}>Account Type</th>\n                            </tr> \n                            {this.state.customerDetailsList}\n                        </tbody>\n                    </table> :\n                    <div><img src={Loader} alt=\"Loading User List\"/></div>\n                }\n            </div>\n        )\n    }\n}\n\nexport default AdminDashboard\n","import React, { Component } from 'react'\nimport Logout from './Logout'\nimport CustomerDashboard from './CustomerDashboard';\nimport AdminDashboard from './AdminDashboard';\n\nexport class Dashboard extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n             \n        }\n    }\n    render() {\n        \n        console.log(this.props)\n        return (\n            <div>\n                {this.props.accountType==='Customer' ? <CustomerDashboard {...this.props}/> : <AdminDashboard {...this.props}/>}\n                <Logout logout={this.props.logout}/>\n            </div>\n        )\n    }\n}\n\nexport default Dashboard","import React, { Component } from 'react'\nimport axios from 'axios'\nimport {NavLink} from 'react-router-dom'\nimport Dashboard from './Dashboard'\nimport Loader from '../../assets/Loader.gif'\n//import {Router, Route, browserHistory, IndexRoute} from \"react-router\";\n\nclass Login extends Component {\n    constructor(props) {\n        super(props)\n    \n        this.state = {\n            userName : '',\n            accountType : '',\n            address : '',\n            email : '',\n            password : '',\n            isLoggedIn : false,\n            isButtonDisable : true,\n            userNameValid : false,\n            passwordValid : false,\n            emailValid : false,\n            showloader : false,\n            emailErrorMsg : '',\n            loginErrorMsg : ''\n        }\n    }\n\n    // handleUsernameChange = (event) => {\n    //     //console.log(' in listener usernameValid '+this.state.userNameValid+' name '+this.state.userName+' '+this.state.userName.localeCompare(\"\"));\n    //     //check for blank field\n    //     if(event.target.value===''){\n    //         this.setState({\n    //             userName : event.target.value,\n    //             userNameValid : false\n    //         },() => {console.log('usernameValid '+this.state.userNameValid+' name '+this.state.userName+' '+this.state.userName.localeCompare(\"\"));\n    //         this.checkall();})\n    //     } else {\n    //         this.setState({\n    //             userName : event.target.value,\n    //             userNameValid : true\n    //         },() => {console.log('usernameValid '+this.state.userNameValid+' name '+this.state.userName+' '+this.state.userName.localeCompare(\"\"));\n    //         this.checkall();})\n    //     }\n    // }\n\n    handleEmailChange = (event) => {\n        //regex check for valid email ID\n        if(event.target.value==='') {\n            this.setState({\n                email : event.target.value,\n                emailValid : false,\n                emailErrorMsg : ``\n            },() => {this.checkall();})\n        }\n        else if (/^[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[A-Za-z]+$/.test(event.target.value)) { \n            this.setState({\n                email : event.target.value,\n                emailValid : true,\n                emailErrorMsg : ''\n            },() => {this.checkall();})\n        } else {\n            this.setState({\n                email : event.target.value,\n                emailValid : false,\n                emailErrorMsg : `Enter a valid Email`\n            },() => {this.checkall();})\n        }\n    }\n\n    handlePasswordChange = (event) => {\n        //check for blank field\n        if(event.target.value==='') {\n            this.setState({\n                password : event.target.value,\n                passwordValid : false\n            },() => {this.checkall();})\n        } else {\n            this.setState({\n                password : event.target.value,\n                passwordValid : true\n            },() => {this.checkall();})\n        }\n        this.checkall();\n    }\n\n    //to check validity of all fields\n    checkall() {\n        if(this.state.emailValid && this.state.passwordValid) {\n            this.setState({\n                isButtonDisable : false\n            })\n        } else {\n            this.setState({\n                isButtonDisable : true\n            })\n        }\n    }\n\n    //handling Login event\n    handleSubmit = (event) => {\n        this.setState({\n            showloader : true\n        })\n        setTimeout( () => {\n            axios.get(`http://www.mocky.io/v2/5d4040a03300003e239d2afe`)\n            .then(response => {\n                console.log(response)\n                console.log(response.data)\n                let i=0;\n                for(i=0;i<response.data.length;i++) {\n                    if(response.data[i].email===this.state.email && response.data[i].password===this.state.password) {\n                        this.setState({\n                            isLoggedIn : true,\n                            loginErrorMsg : '',\n                            userName : response.data[i].userName,\n                            address : response.data[i].address,\n                            accountType : response.data[i].accountType,\n                            showloader : false\n                        })\n                        break;\n                    }\n                }\n                if(i===response.data.length)\n                {\n                    this.setState({\n                        isLoggedIn : false,\n                        loginErrorMsg : 'Wrong Credentials!',\n                        showloader : false\n                    })\n                }\n                //this.setState({posts: response.data})\n            })\n            .catch(error => {\n                console.log(error)\n                this.setState({\n                    loginErrorMsg : 'Error Fetching Data...Check Your Internet Connection!!',\n                    showloader : false\n                })\n                //this.setState({errorMsg: 'Error retreiving data'})\n            })\n        //alert(`Welcome ${this.state.userName}!, Your Account is Registered with Email ID -  ${this.state.email}`)\n        }, 1000);\n        \n        event.preventDefault()\n    }\n\n    //hnadling Logout event\n    logout = () => {\n        //console.log(this);\n        this.setState({\n            userName : '',\n            email : '',\n            password : '',\n            address : '',\n            accountType : '',\n            isLoggedIn : false,\n            isButtonDisable : true,\n            userNameValid : false,\n            passwordValid : false,\n            emailValid : false,\n            showloader : false,\n            emailErrorMsg : '',\n            loginErrorMsg : ''\n        })\n    }\n    \n    render() {\n      if(this.state.isLoggedIn) {\n        return (\n          <Dashboard {...this.state} logout={this.logout}/>\n        )\n      } else {\n        return (\n          <React.Fragment>\n            {\n              (this.state.showloader===false) ? \n              <React.Fragment>\n                <form onSubmit={this.handleSubmit}>\n                  <div>\n                    <label>Email ID </label>\n                    <input type='text' value={this.state.email} onChange={this.handleEmailChange}/>\n                    {this.state.emailErrorMsg!=='' && <div style={{fontSize:'70%'}}>{this.state.emailErrorMsg}</div>}\n                  </div><br/>\n                  <div>\n                    <label>Password </label>\n                    <input type='password' value={this.state.password} onChange={this.handlePasswordChange}/>\n                  </div><br/>\n                  <button type=\"submit\" disabled = {this.state.isButtonDisable}>Login</button><br/>\n                </form>\n                <div>{this.state.loginErrorMsg==='' ? null:this.state.loginErrorMsg}</div> <br/>\n                <div>\n                  Don't Have an account!! <br/><br/>\n                  <NavLink to='/register'>Register</NavLink>\n                </div>\n              </React.Fragment> :\n              <div><img src={Loader} alt=\"Logging you in...\"/></div>\n            }\n          </React.Fragment>\n        )\n      }\n    }\n}\n\nexport default Login\n","import React, { Component } from 'react';\nimport {NavLink} from 'react-router-dom';\nimport axios from 'axios';\n\n\nclass Register extends Component {\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      userName : '',\n      accountType : '',\n      email : '',\n      address : '',\n      password : '',\n      confirmPassword : '',\n      isLoggedIn : false,\n      isButtonDisable : true,\n      userNameValid : false,\n      accountTypeValid : false,\n      emailValid : false,\n      addressValid : false,\n      passwordValid : false,\n      confirmPasswordValid : false,\n      showloader : false,\n      emailErrorMsg : '',\n      loginErrorMsg : '',\n      confirmPasswordErrorMsg : ''\n    }\n  }\n\n  // handleSubmit = (event) => {\n  //   this.setState({\n  //       showloader : true\n  //   })\n  //   setTimeout( () => {\n  //       axios.get('https://demo7189719.mockable.io/login')\n  //       .then(response => {\n  //           console.log(response)\n  //           console.log(response.data)\n  //           let i=0;\n  //           for(i=0;i<response.data.length;i++) {\n  //               if(response.data[i].email===this.state.email && response.data[i].password===this.state.password) {\n  //                   this.setState({\n  //                       isLoggedIn : true,\n  //                       loginErrorMsg : '',\n  //                       userName : response.data[i].userName,\n  //                       address : response.data[i].address,\n  //                       showloader : false\n  //                   })\n  //                   break;\n  //               }\n  //           }\n  //           if(i===response.data.length)\n  //           {\n  //               this.setState({\n  //                   isLoggedIn : false,\n  //                   loginErrorMsg : 'Wrong Credentials!',\n  //                   showloader : false\n  //               })\n  //           }\n  //           //this.setState({posts: response.data})\n  //       })\n  //       .catch(error => {\n  //           console.log(error)\n  //           this.setState({\n  //               loginErrorMsg : 'Error Fetching Data...Check Your Internet Connection!!',\n  //               showloader : false\n  //           })\n  //           //this.setState({errorMsg: 'Error retreiving data'})\n  //       })\n  //   //alert(`Welcome ${this.state.userName}!, Your Account is Registered with Email ID -  ${this.state.email}`)\n  //   }, 1000);\n    \n  //   event.preventDefault()\n  // }\n\n  handleUsernameChange = (event) => {\n    if(event.target.value===''){\n      this.setState({\n        userName : event.target.value,\n        userNameValid : false\n      },() => {console.log('usernameValid '+this.state.userNameValid+' name '+this.state.userName+' '+this.state.userName.localeCompare(\"\"));\n      this.checkall();})\n    } else {\n      this.setState({\n        userName : event.target.value,\n        userNameValid : true\n      },() => {console.log('usernameValid '+this.state.userNameValid+' name '+this.state.userName+' '+this.state.userName.localeCompare(\"\"));\n      this.checkall();})\n    }\n  }\n\n  handleAccountTypeChange = (event) => {\n    if(event.target.value!=='') {\n      this.setState({\n        accountType: event.target.value,\n        accountTypeValid: true\n      },() => {console.log(this.state.accountType);\n        this.checkall()})\n    } else {\n      this.setState({\n        accountType: event.target.value,\n        accountTypeValid: false\n      },() => this.checkall())\n    }\n  }\n\n  handleEmailChange = (event) => {\n    //regex check for valid email ID\n    if(event.target.value==='') {\n        this.setState({\n            email : event.target.value,\n            emailValid : false,\n            emailErrorMsg : ``\n        },() => {this.checkall();})\n    }\n    else if (/^[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[A-Za-z]+$/.test(event.target.value)) { \n        this.setState({\n            email : event.target.value,\n            emailValid : true,\n            emailErrorMsg : ''\n        },() => {console.log(this.state.emailValid);this.checkall();})\n    } else {\n        this.setState({\n            email : event.target.value,\n            emailValid : false,\n            emailErrorMsg : `Enter a valid Email`\n        },() => {this.checkall();})\n    }\n  }\n\n  handleAddressChange = (event) => {\n    if(event.target.value===''){\n      this.setState({\n        address : event.target.value,\n        addressValid : false\n      },() => {console.log(this.state.addressValid);this.checkall()})\n    } else {\n      this.setState({\n        address : event.target.value,\n        addressValid : true\n      },() => this.checkall())\n    }\n  }\n\n  handlePasswordChange = (event) => {\n    //check for blank field\n    if(event.target.value==='') {\n      if(this.state.confirmPassword==='') {\n        this.setState({\n          password : event.target.value,\n          passwordValid : false,\n          confirmPasswordErrorMsg : ''\n        },() => this.checkall())\n      } else {\n          this.setState({\n            password : event.target.value,\n            passwordValid : false,\n            confirmPasswordValid : false,\n            confirmPasswordErrorMsg : 'Passwords do not Match!'\n          },() => this.checkall())\n        }\n    } else if(event.target.value===this.state.confirmPassword) {\n        this.setState({\n          password : event.target.value,\n          passwordValid : true,\n          confirmPasswordValid : true,\n          confirmPasswordErrorMsg : ''\n        },() => this.checkall())\n    } else {\n      this.setState({\n        password : event.target.value,\n        passwordValid : true,\n        confirmPasswordValid : false,\n        confirmPasswordErrorMsg : 'Passwords do not Match!'\n      },() => this.checkall())\n    }\n  }\n\n  handleConfirmPasswordChange = (event) => {\n    if(event.target.value===this.state.password) {\n        this.setState({\n          confirmPassword: event.target.value,\n          confirmPasswordValid: true,\n          confirmPasswordErrorMsg: ''\n        },() => this.checkall())\n      } else {\n      this.setState({\n        confirmPassword: event.target.value,\n        confirmPasswordValid: false,\n        confirmPasswordErrorMsg: 'Passwords do not Match!'\n      },() => this.checkall())\n    }\n  }\n\n  //to check validity of all fields\n  checkall() {\n    if(this.state.userName && this.state.accountTypeValid && this.state.emailValid && this.state.addressValid && this.state.passwordValid && this.state.confirmPasswordValid) {\n      this.setState({\n        isButtonDisable : false\n      })\n    } else {\n      this.setState({\n        isButtonDisable : true\n      })\n    }\n  }\n  \n  handleSubmit = (event) => {\n    event.preventDefault();\n    const user = {\n      userName : this.state.userName,\n      accountType : this.state.accountType,\n      email : this.state.email,\n      address : this.state.address,\n      password : this.state.password\n    }\n    axios.post(`http://www.mocky.io/v2/5d4040a03300003e239d2afe`,{user})\n      .then(response => {\n        console.log(response);\n        console.log(response.data);\n      })\n      .catch(err => {\n        console.log(err)\n      })\n    console.log(event);\n  }\n\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <div>\n            <label>User Name </label>\n            <input type='text' value={this.state.userName} onChange={this.handleUsernameChange}/>\n          </div><br/>\n          <div>\n            <label>Account Type </label>\n            <select name=\"accountType\" value={this.state.accountType} onChange={this.handleAccountTypeChange}>\n              <option value=\"\" disabled>Select</option>\n              <option value=\"Customer\">Customer</option>\n              <option value=\"Admin\">Admin</option>\n            </select>\n          </div><br/>\n          <div>\n            <label>Address </label>\n            <input type='text' value={this.state.address} onChange={this.handleAddressChange}/>\n          </div><br/>\n          <div>\n            <label>Email ID </label>\n            <input type='text' value={this.state.email} onChange={this.handleEmailChange}/>\n            {this.state.emailErrorMsg!=='' && <div style={{fontSize:'70%'}}>{this.state.emailErrorMsg}</div>}\n          </div><br/>\n          <div>\n            <label>Password </label>\n            <input type='password' value={this.state.password} onChange={this.handlePasswordChange}/>\n          </div><br/>\n          <div>\n            <label>Confirm Password </label>\n            <input type='password' value={this.state.confirmPassword} onChange={this.handleConfirmPasswordChange}/>\n            {this.state.confirmPasswordErrorMsg!=='' && <div style={{fontSize:'70%'}}>{this.state.confirmPasswordErrorMsg}</div>}\n          </div><br/>\n          <button type=\"submit\" disabled = {this.state.isButtonDisable}>Register</button><br/>\n        </form><br/>\n        <div>\n          Already have an account!! <br/><br/>\n          <NavLink to='/login'>Login</NavLink>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Register\n","import React from 'react'\n\nfunction PageNotFound() {\n    return (\n        <div>\n            <h1>Error : 404... Page Not Found !</h1>\n        </div>\n    )\n}\n\nexport default PageNotFound;","import React,{Component} from 'react';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\n\nimport Login from './components/classComponents/Login'\nimport Register from './components/classComponents/Register'\nimport PageNotFound from './components/classComponents/PageNotFound'\nimport './App.css'\n\nclass App extends Component {\n  render() {\n    console.log(\"BASE_HREF : \",process.env.REACT_APP_BASE_HREF);\n    return (\n      <div className=\"App\">\n        <h1>Welcome to My Website</h1>\n        <BrowserRouter basename={process.env.REACT_APP_BASE_HREF || '/my-login-page'}>\n          <Switch>\n            <Route path='/login' component={Login} exact/>\n            <Route path='/register' component={Register} exact/>\n            <Route path='/' component={PageNotFound}/>\n            {/* <Route component={PageNotFound} /> */}\n          </Switch>\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}